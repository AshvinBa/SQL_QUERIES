/*
SHOW DATABASES;

CREATE DATABASE IF NOT EXISTS RMS;

USE RMS;

CREATE TABLE PASSENGER(
ID INT,
NAME VARCHAR(20),
AGE INT,
GENDER CHAR(10),
TICKET_ID INT,
PRN INT
);

DESC PASSENGER;

ALTER TABLE PASSENGER 
ADD CONSTRAINT PRIMARY KEY (ID);

ALTER TABLE PASSENGER
ADD CONSTRAINT PRIMARY KEY (TICKET_ID);

SELECT * FROM PASSENGER;

 ALTER TABLE PASSENGER
CHANGE COLUMN AGE AGE INT NOT NULL;

*/
/*------------------------------------------------------------------------------*/
/* PRACTICAL NUMBER-3 */

SHOW DATABASES;
CREATE DATABASE IF NOT EXISTS ASHVIN_BARI;

USE ASHVIN_BARI;

CREATE TABLE ID_CARD
(
ID_NO INT PRIMARY KEY,
NAME VARCHAR(30),
BLOOD_GROUP CHAR(10),
DEPARTMENT VARCHAR(50),
PHONE_NO integer
);
DESC ID_CARD;
ALTER TABLE ID_CARD 
ADD COLUMN AGE INT NOT NULL DEFAULT 90; 
SELECT * FROM ID_CARD;

/*
ALTER TABLE ID_CARD
DROP COLUMN DOB;
*/

/*----------------------------------------------------------------------------------------*/
/* PRACTICAL NUMBER-4 */
#INSERTING RECORD
INSERT INTO ID_CARD(ID_NO,NAME,BLOOD_GROUP,DEPARTMENT,PHONE_NO) VALUES
(1,'ASHVIN','O+','COMPUTER',369),
(2,'TUSHAR','AB+','COMPUTER',456),
(3,'YASH','A+','COMPUTER',789);

SET SQL_SAFE_UPDATES=0;

ALTER TABLE ID_CARD
ADD COLUMN ARRTIME TIME;

UPDATE ID_CARD
SET ARRTIME='10:00:20'
WHERE ID_NO=1;


UPDATE ID_CARD
SET ARRTIME='11:00:20'
WHERE ID_NO=2;


UPDATE ID_CARD
SET ARRTIME='10:30:20'
WHERE ID_NO=3;

DESC ID_CARD;

#UPDATE
UPDATE ID_CARD
SET AGE=20
WHERE NAME='ASHVIN';

UPDATE ID_CARD
SET AGE=21
WHERE NAME='TUSHAR';

UPDATE ID_CARD
SET AGE=22
WHERE NAME='YASH';

UPDATE ID_CARD
SET PHONE_NO=9370682088
WHERE NAME='ASHVIN';

# NAME
SELECT NAME FROM ID_CARD
WHERE AGE=20;

# USE OF DISTINCT CLAUSE
SELECT AGE FROM ID_CARD;
SELECT DISTINCT AGE FROM ID_CARD;

# ORDER BY CLAUSE
SELECT * FROM ID_CARD ORDER BY AGE ASC;
SELECT * FROM ID_CARD ORDER BY AGE DESC;

# BETWEEN OPERATOR
SELECT * FROM ID_CARD
WHERE AGE BETWEEN 19 AND 21;

# LIKE OPERATOR
SELECT * FROM ID_CARD WHERE BLOOD_GROUP LIKE 'O+%';

# IN OPERATOR
SELECT * FROM ID_CARD
WHERE PHONE_NO IN(369);

# NULL
SELECT * FROM ID_CARD
WHERE ID_NO IS NULL;

# DELETION
DELETE FROM ID_CARD
WHERE AGE=21;

SELECT * FROM ID_CARD;


/*-----------------------------------------------------------------------------------------------------------------------*/

show databases;
CREATE DATABASE SUDHIR;
USE SUDHIR;
CREATE TABLE PAPA
(
ID INT(5),
NAME VARCHAR(20),
PH_NO INT(20),
OCCUPATION VARCHAR(30),
M_TIME TIME
);

DESC PAPA;

ALTER TABLE PAPA
ADD COLUMN N_TIME TIME DEFAULT '10:00:02';

SELECT * FROM PAPA;

ALTER TABLE PAPA
DROP COLUMN N_TIME;

ALTER TABLE PAPA
RENAME TO DAD;

ALTER TABLE DAD
RENAME TO PAPA;

ALTER TABLE PAPA
MODIFY PH_NO VARCHAR(20);

INSERT INTO PAPA (ID,NAME,PH_NO,OCCUPATION,M_TIME) VALUES
(1,'SUDHIR','7385572618','METALS','10:11:07'),
(2,'KANTILAL','9370682088','TOMATO BUISNESS','11:01:00');

SELECT * FROM PAPA;

INSERT INTO PAPA (ID,NAME,PH_NO,OCCUPATION,M_TIME,N_TIME) VALUES
(3,'ASHVIN','9370682088','METALS','10:11:07','12:05:22');

ALTER TABLE PAPA
CHANGE ID ID_NO INT PRIMARY KEY;

DESC PAPA;
SELECT* FROM PAPA;

ALTER TABLE PAPA
ADD COLUMN AGE INT DEFAULT 30;

# UPDATE

SET SQL_SAFE_UPDATES=0;

UPDATE PAPA
SET AGE = 21
WHERE ID_NO=3;

UPDATE PAPA
SET AGE=75
WHERE ID_NO=2;

UPDATE PAPA
SET AGE=45
WHERE ID_NO=1;

SELECT NAME FROM PAPA
WHERE ID_NO=1;

INSERT INTO PAPA(ID_NO,NAME,PH_NO,OCCUPATION,M_TIME,N_TIME)VALUES
(4,'YOGITA','8421727224','HOUSE-WIFE','08:30:08','11:20:03');

SELECT * FROM PAPA;

UPDATE PAPA
SET AGE=38
WHERE ID_NO=4;

SELECT NAME FROM PAPA
WHERE ID_NO=1;

SELECT NAME FROM PAPA
WHERE ID_NO=2;

DELETE FROM PAPA
WHERE ID_NO=4;

SELECT * FROM PAPA;

/*--------------------------------------------------------------------------*/
#PRAC-4

# AGGREGATION FUNCTION.
SELECT AVG(AGE) FROM PAPA;
SELECT MIN(AGE) FROM PAPA;
SELECT MAX(AGE) FROM PAPA;
SELECT COUNT(ID_NO) AS FAMILY_MEMBER FROM PAPA;
SELECT SUM(AGE)AS TATAL_AGE FROM PAPA;
SELECT * FROM PAPA;

# LOGICAL CONDITION.
SELECT * FROM PAPA
WHERE AGE BETWEEN 20 AND 40;

# CLAUSE.
SELECT * FROM PAPA ORDER BY NAME;
SELECT * FROM PAPA ORDER BY ID_NO;
SELECT * FROM PAPA ORDER BY PH_NO;

# GROUPED BY CLAUSE.

SELECT NAME,AVG(AGE) FROM PAPA GROUP BY ID_NO;
SELECT NAME,OCCUPATION,PH_NO,AVG(AGE) FROM PAPA GROUP BY ID_NO; 

# HAVING CLAUSE

SELECT NAME,AVG(AGE) AS AVG_AGE FROM PAPA GROUP BY NAME HAVING AVG_AGE>30;
SELECT NAME,AVG(ID_NO) AS GRETEST_ID FROM PAPA GROUP BY NAME HAVING GRETEST_ID > 1;

/*--------------------------------------------------------------------------------------------------------------------------*/
/*  REVISION */

SHOW DATABASES;
CREATE DATABASE IF NOT EXISTS BANK;
USE BANK;

CREATE TABLE CUSTOMER
(
CUST_ID INT(3), 
F_NAME VARCHAR(10),
M_NAME VARCHAR(10),
L_NAME VARCHAR(10),
AGE INT(3),
EMAIL VARCHAR(20),
CON_NO INT(20)
);

ALTER TABLE CUSTOMER
ADD COLUMN ADDR VARCHAR(20) DEFAULT 'MAHARASHTRA';

DESC CUSTOMER;

ALTER TABLE CUSTOMER
MODIFY CON_NO BIGINT;

ALTER TABLE CUSTOMER
MODIFY EMAIL VARCHAR(50);

SET SQL_SAFE_UPDATES=0;

DELETE FROM CUSTOMER
WHERE CUST_ID=1;

INSERT INTO CUSTOMER(CUST_ID,F_NAME,M_NAME,L_NAME,AGE,EMAIL,CON_NO,ADDR)VALUES
(1,'ASHVIN','SUDHIR','BARI',21,'ashvinbari6@gmail.com',9370682088,'VITTHAL PETH JALGAON');
select * from customer;

INSERT INTO CUSTOMER(CUST_ID,F_NAME,M_NAME,L_NAME,AGE,EMAIL,CON_NO,ADDR)VALUES
(1,'ASHVIN','SUDHIR','BARI',21,'ashvinbari6@gmail.com',9370682088,'VITTHAL PETH JALGAON'),
(2,'YOGITA','SUDHIR','BARI',39,'bari6@gmail.com',9750683098,'VITTHAL PETH JALGAON'),
(3,'GAYATRI','SUDHIR','BARI',19,'GAYUbari6@gmail.com',7670686888,'VITTHAL PETH JALGAON'),
(4,'SUDHIR','KANTILAL','BARI',48,'SUDHIRbari6@gmail.com',7385572618,'VITTHAL PETH JALGAON');
select * from customer;

SET SQL_SAFE_UPDATES=0;

DELETE FROM CUSTOMER
WHERE CUST_ID=5;

# AGGRIGATION FUNCTION.
SELECT AVG(AGE) FROM CUSTOMER;
SELECT AVG(AGE) AS AVG_AGE FROM CUSTOMER;
SELECT MAX(AGE) AS OLDER_CUSTOMER FROM CUSTOMER ;
SELECT MIN(AGE) AS YOUNGER_CUSTOMER FROM CUSTOMER;
SELECT COUNT(CUST_ID) AS TOTAL_CUST FROM CUSTOMER;
SELECT SUM(AGE) AS TOTAL_AGE FROM CUSTOMER;

# BETWEEN OPERATOR
SELECT *FROM CUSTOMER
WHERE AGE BETWEEN 15 and 40;

# ORDERED BY COLUMN
SELECT * FROM CUSTOMER ORDER BY CUST_ID;
SELECT * FROM CUSTOMER ORDER BY F_NAME ASC;
SELECT * FROM CUSTOMER ORDER BY F_NAME DESC;


ALTER TABLE CUSTOMER
ADD GENDER VARCHAR(10) DEFAULT 'MALE';

UPDATE CUSTOMER
SET GENDER='FEMALE'
WHERE CUST_ID=3;

# GROUP BY CLAUSE
SELECT GENDER,AVG(AGE) FROM CUSTOMER GROUP BY GENDER;

# GROUP BY HAVING CLAUSE
SELECT GENDER,AVG(AGE) AS AVG_AGE FROM CUSTOMER GROUP BY GENDER HAVING AVG_AGE>30;

# ---------------------------------------------------------------------

CREATE TABLE CASSIER
(
ID INT(3), 
F_NAME VARCHAR(10),
AGE INT(3),
EMAIL VARCHAR(20),
CON_NO INT(20),
ADDRESS VARCHAR(50),
GENDER VARCHAR(10)
);
ALTER TABLE CASSIER
MODIFY CON_NO BIGINT(20);

INSERT INTO CASSIER(ID,F_NAME,AGE,EMAIL,CON_NO,ADDRESS,GENDER)VALUES
(1,'SHEKHAR',42,'SHEKHAR@gmail.com',7385572618,'VITTHAL PETH JALGAON','MALE'),
(2,'RIYA',38,'SURENDRA@gmail.com',7385545618,'SDFAL PETH JALGAON','FEMALE'),
(3,'NARENDRA',29,'NARENDRA@gmail.com',738554528,'PETH JALGAON','MALE'),
(4,'RENU',26,'SHEKHAR@gmail.com',4572126184,'VITSFD PETH JALGAON','FEMALE');

SELECT * FROM CASSIER;
SELECT * FROM CUSTOMER;

SELECT * FROM CASSIER
WHERE ADDRESS IN('VITTHAL PETH JALGAON');

SELECT * FROM CUSTOMER
WHERE ADDR IN('VITTHAL PETH JALGAON');

SELECT * FROM CUSTOMER
WHERE ADDR NOT IN('VITTHAL PETH JALGAON');

SELECT * FROM CASSIER
WHERE ADDRESS NOT IN('VITTHAL PETH JALGAON');


# UNION
SELECT CUST_ID 
FROM CUSTOMER
UNION ALL
SELECT ID
FROM CASSIER;

SELECT F_NAME
FROM CUSTOMER
UNION ALL
SELECT F_NAME
FROM CASSIER;

# INTERSECT
SELECT* FROM CUSTOMER AS CU
INNER JOIN CASSIER AS CA
ON CU.CUST_ID=CA.ID;

# -----------------------------------------------------------------------------

CREATE DATABASE IF NOT EXISTS PRACTICE;
USE PRACTICE;

CREATE TABLE STUDENT
(
STD_ID INT PRIMARY KEY,
NAME VARCHAR(30)
);

INSERT INTO STUDENT(STD_ID,NAME)VALUES
(101,'ADAM'),
(102,'BOB'),
(103,'CASEY');

CREATE TABLE COURSE
(
STD_ID INT PRIMARY KEY,
COURSE VARCHAR(30)
);

INSERT INTO COURSE(STD_ID,COURSE)VALUES
(101,'ENGLIS'),
(102,'MATH'),
(103,'SCIENCE'),
(104,'CS'),
(105,'ES');

# UNION
SELECT STD_ID FROM COURSE
UNION ALL
SELECT STD_ID FROM STUDENT;

SELECT STD_ID 
FROM STUDENT 
UNION ALL
SELECT STD_ID 
FROM COURSE ;

# INTERSECT
SELECT * FROM 
STUDENT AS S
INNER JOIN
COURSE AS C
ON S.STD_ID=C.STD_ID;

SELECT STD_ID FROM  
STUDENT AS S
INNER JOIN 
COURSE AS C
ON S.STD_ID=C.STD_ID;

# UNION
SELECT STD_ID FROM COURSE
UNION
SELECT STD_ID FROM STUDENT;

# LEFT JOIN
SELECT * FROM 
STUDENT AS S
LEFT JOIN
COURSE AS C
ON S.STD_ID=C.STD_ID;

# RIGHT JOIN
SELECT * FROM 
STUDENT AS S
RIGHT JOIN 
COURSE AS C
ON S.STD_ID=C.STD_ID;

# SET COMPARISON
SELECT COURSE
FROM COURSE
WHERE STD_ID>1;

/*---------------------------------------------------*/

# UNION 
SELECT STD_ID FROM COURSE
UNION ALL 
SELECT STD_ID FROM STUDENT;

# INTERSECT
SELECT * FROM
COURSE AS C
INNER JOIN
STUDENT AS S
ON C.STD_ID=S.STD_ID;

# LEFT JOIN
SELECT * FROM 
STUDENT AS S
LEFT JOIN 
COURSE AS C
ON S.STD_ID=C.STD_ID;

# RIGHT JOIN
SELECT * FROM 
STUDENT AS S
RIGHT JOIN 
COURSE AS C
ON S.STD_ID = C.STD_ID;

SELECT COURSE
FROM COURSE
WHERE STD_ID > 1;

/*----------------------------------------------------------------------------------------*/
# PRACTICAL - 7
SHOW DATABASES;
CREATE DATABASE IF NOT EXISTS STATION;

USE STATION;

CREATE TABLE TICKET1
(
PNR INT PRIMARY KEY,
TICKET_ID INT,
TRAIN_NO INT
);

CREATE TABLE TRAIN1
(
TRAIN_NO INT PRIMARY KEY,
TNAME VARCHAR(50)
);

INSERT INTO TICKET1(PNR,TICKET_ID,TRAIN_NO)VALUES
(123456,110,12139),
(123478,115,12465),
(213445,415,21987);

SELECT * FROM TICKET1;

INSERT INTO TRAIN1(TRAIN_NO,TNAME) VALUES
(12139,'SEWAGRAN EXP'),
(12465,'KAMAKHYA EXP'),
(11078,'GORAKHPUR EXP');

#EQUI JOIN
SELECT * FROM 
TICKET1,TRAIN1
WHERE TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

#JOIN-ON
SELECT * FROM
TICKET1 INNER JOIN TRAIN1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# NATURAL JOIN 
SELECT * FROM 
TICKET1 NATURAL JOIN TRAIN1;

# LEFT JOIN
SELECT* FROM TICKET1
LEFT JOIN TRAIN1 
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

SELECT* FROM TRAIN1
LEFT JOIN TICKET1 
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# RIGHT JOIN
SELECT * FROM TICKET1
RIGHT JOIN TRAIN1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

SELECT * FROM TRAIN1
RIGHT JOIN TICKET1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# FULL JOIN
SELECT * FROM
TICKET1 LEFT JOIN TRAIN1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# EQUIE JOIN
SELECT * FROM
TICKET1,TRAIN1
WHERE TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# JOIN-ON
SELECT * FROM
TRAIN1 INNER JOIN TICKET1
ON TRAIN1.TRAIN_NO=TICKET1.TRAIN_NO;

SELECT * FROM
TICKET1 INNER JOIN TRAIN1
ON TRAIN1.TRAIN_NO=TICKET1.TRAIN_NO;

# NATURAL JOIN
SELECT *FROM
TICKET1 NATURAL JOIN TRAIN1;

# LEFT JOIN
SELECT * FROM 
TICKET1 LEFT JOIN TRAIN1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# RIGHT JOIN
SELECT * FROM
TRAIN1 RIGHT JOIN TICKET1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

# FULL JOIN
SELECT * FROM
TRAIN1 LEFT JOIN TICKET1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO
UNION
SELECT * FROM
TRAIN1 LEFT JOIN TICKET1
ON TICKET1.TRAIN_NO=TRAIN1.TRAIN_NO;

/*----------------------------------------------------------------------------------------------------------------------------*/

# PRACTICAL - 8

# VIEW CONCEPT

CREATE DATABASE IF NOT EXISTS RMS2;
USE RMS2;
CREATE TABLE PASSENGER
(
P_ID INT,
P_NAME VARCHAR(30),
AGE INT ,
GENDER CHAR(10),
TICKET_ID INT,
PNR INT
);
ALTER TABLE PASSENGER
ADD CONSTRAINT PRIMARY KEY(P_ID); 
INSERT INTO PASSENGER(P_ID,P_NAME,AGE,GENDER,TICKET_ID,PNR)VALUES
(201,'JOHN',21,'MALE',596,308123905),
(217,'MARK',24,'MALE',136,1265577771),
(239,'ALICE',29,'FENALE',245,1975364587),
(340,'JENNY',32,'FEMALE',169,2110755678),
(367,'TONY',24,'MALE',101,2120017791);

CREATE TABLE TICKET
(
PNR INT,
TICKET_ID INT,
ARRTIME TIME,
DEPTTIME TIME,
TRAINNO INT,
TLKAMT INT,
SEAT_NO INT,
RESERVE_STATUS CHAR(20)
);
INSERT INTO TICKET(PNR,TICKET_ID,ARRTIME,DEPTTIME,TRAINNO,TLKAMT,SEAT_NO,RESERVE_STATUS) VALUES
(308123905,596,'20:04:15','20:07:19',21673,420,70,'CNF'),
(1265577771,136,'12:47:10','12:50:10',22154,376,15,'CNF'),
(1975364587,245,'07:40:15','07:45:58',19134,298,63,'CNF'),
(2110755678,169,'16:20:38','16:24:54',27139,380,37,'CNF'),
(2120017791,101,'04:20:38','04:40:10',12139,289,12,'CNF');
ALTER TABLE TICKET
ADD CONSTRAINT PRIMARY KEY(PNR);

DELETE FROM TICKET
WHERE SEAT_NO=70;

SELECT *FROM TICKET
WHERE SEAT_NO BETWEEN 10 AND 100;

SET SQL_SAFE_UPDATES=0;

UPDATE TICKET
SET RESERVE_STATUS='NCNF'
WHERE SEAT_NO=70;

SELECT* FROM TICKET;

# -----------------------------------------------------------------------------------------------
# EXPERIMENT NO - 9.
USE RMS2;
SELECT * FROM PASSENGER;
SELECT * FROM TICKET;

# CREATING VIEW

CREATE VIEW V1 AS
SELECT * FROM PASSENGER
WHERE AGE>25;

SELECT * FROM V1;
INSERT INTO V1(P_ID,P_NAME,AGE,GENDER,TICKET_ID,PNR)VALUES
(570,'WALTER',31,'MALE',370,2120017791);

UPDATE V1
SET AGE=30
WHERE AGE=31;

DELETE FROM V1
WHERE AGE=30;


/*-------------------------------------------------------------------------*/

SHOW DATABASES;
CREATE DATABASE COLLEGE_DB_700;

USE COLLEGE_DB_700;
SELECT DATABASE();

CREATE TABLE EMP_DATA
(
EMP_ID INT NOT NULL,
EMP_NAME VARCHAR(30) NOT NULL,
EMP_SALARY VARCHAR(30) NOT NULL
);
ALTER TABLE EMP_DATA
ADD CONSTRAINT PRIMARY KEY(EMP_ID);
INSERT INTO EMP_DATA VALUES
(10,'RITA','5000'),
(11,'SAHIL','7500'),
(12,'REKHA','4800'),
(13,'NIKHIL','7300');
SELECT * FROM EMP_DATA;
CREATE TABLE EMP_LOGS(INFO_UPDATE VARCHAR(255));
SHOW TABLES;

INSERT INTO EMP_LOGS VALUES(CONCAT('UPDATED EMP_SALARY INFO(',OLD.EMP_ID,'',OLD.EMP_NAME,'',OLD.EMP_SALARY,')TO(',NEW.EMP_ID,'',NEW.EMP_NAME,'',NEW.EMP_SALARY,')'));

CREATE TABLE BACKUP;

/*-----------------------------------------------------------------------------------*/
# TRIGGER

CREATE DATABASE TRIGGER1;
USE TRIGGER1;
CREATE TABLE MAIN
(
ID INT,
SALARY INT 
); 

INSERT INTO MAIN (ID,SALARY) VALUES
(1,20000),(2,50000),(3,100000),(4,800000);
SELECT * FROM MAIN;

CREATE TABLE BACKUP
(
ID INT,
SALARY INT 
);
/*                                                                                                                                                                                                                                                                                                                                           
create or replace trigger t1
before delete on MAIN
for each row
begin
insert into backup values(:old.id,:old.salary);
end;
*/

CREATE DATABASE LIBRARY;
SHOW DATABASES;
USE LIBRARY;

# CREATE TABLE
CREATE TABLE PUBLISHER
(
NAME VARCHAR(40),
ADDRESS VARCHAR(40),
PHONE INT
); 

# INSERT VALUES IN TABLE
INSERT INTO PUBLISHER(NAME,ADDRESS,PHONE)VALUES
('ASH','JAL',9370),
('MAD','SHI',4574),
('JAS','DOM',2341),
('TUS','SDF',4531),
('YAS','SDG',9862);
# SHOW TABLE
SELECT *FROM PUBLISHER;

ALTER TABLE PUBLISHER
ADD COLUMN ID INT DEFAULT 1;

UPDATE PUBLISHER
SET ID=3
WHERE NAME='MAD';

# TO ADD CONSTRAINT
ALTER TABLE PUBLISHER
ADD CONSTRAINT PRIMARY KEY (NAME);
DESC PUBLISHER;

# CHANGING DATATYPE
ALTER TABLE PUBLISHER
CHANGE PHONE PHONE BIGINT;

ALTER TABLE PUBLISHER
CHANGE PHONE PHONE BIGINT NOT NULL DEFAULT 90;

ALTER TABLE PUBLISHER
ADD COLUMN AGE INT(3) DEFAULT 30;

DELETE FROM PUBLISHER
WHERE AGE=30;

SET SQL_SAFE_UPDATES=0;

UPDATE PUBLISHER
SET AGE=25
WHERE NAME='JAS';
SELECT *FROM PUBLISHER;

# AGGREGATION_FUNC
SELECT AVG(AGE) FROM PUBLISHER;
SELECT SUM(PHONE) FROM PUBLISHER;
SELECT MAX(PHONE) FROM PUBLISHER;
SELECT MIN(PHONE) FROM PUBLISHER;
SELECT COUNT(PHONE) FROM PUBLISHER;

# USE CONDITION:
SELECT * FROM PUBLISHER
WHERE ID>=3 AND ID<5;

# use of order by clause
SELECT * FROM PUBLISHER ORDER BY PHONE;
SELECT * FROM PUBLISHER ORDER BY ID ASC;
SELECT * FROM PUBLISHER ORDER BY ID DESC;

SELECT NAME,AVG(AGE) FROM PUBLISHER
GROUP BY NAME;

select name,age from publisher
group by name;

SELECT *FROM PUBLISHER;

SELECT ID,NAME FROM PUBLISHER
GROUP BY NAME
HAVING MAX(AGE) >23;

SELECT ID,NAME FROM PUBLISHER
GROUP BY name
HAVING AVG(AGE)>25;
/*----------------------------------------------------------------*/

# PRAC. - 6

CREATE DATABASE PRAC6;
USE PRAC6;

CREATE TABLE PASSENGER1
(
P_ID INT,
P_NAME VARCHAR(30),
AGE INT ,
GENDER CHAR(10),
TICKET_ID INT,
PNR INT
);
ALTER TABLE PASSENGER1
ADD CONSTRAINT PRIMARY KEY(P_ID); 
INSERT INTO PASSENGER1(P_ID,P_NAME,AGE,GENDER,TICKET_ID,PNR)VALUES
(201,'JOHN',21,'MALE',596,308123905),
(217,'MARK',24,'MALE',136,1265577771),
(239,'ALICE',29,'FENALE',245,1975364587),
(340,'JENNY',32,'FEMALE',169,2110755678),
(367,'TONY',24,'MALE',101,2120017791);

SELECT *FROM PASSENGER1;
CREATE TABLE TICKET1
(
PNR INT,
TICKET_ID INT,
ARRTIME TIME,
DEPTTIME TIME,
TRAINNO INT,
TLKAMT INT,
SEAT_NO INT,
RESERVE_STATUS CHAR(20)
);
INSERT INTO TICKET1(PNR,TICKET_ID,ARRTIME,DEPTTIME,TRAINNO,TLKAMT,SEAT_NO,RESERVE_STATUS) VALUES
(308123905,596,'20:04:15','20:07:19',21673,420,70,'CNF'),
(1265577771,136,'12:47:10','12:50:10',22154,376,15,'CNF'),
(1975364587,245,'07:40:15','07:45:58',19134,298,63,'CNF'),
(2110755678,169,'16:20:38','16:24:54',27139,380,37,'CNF'),
(2120017791,101,'04:20:38','04:40:10',12139,289,12,'CNF');
SELECT *FROM TICKET1;
DROP TABLE PASSENGER;

# UNION

SELECT TICKET_ID FROM TICKET1
UNION ALL
SELECT P_ID FROM PASSENGER1;

SELECT PNR FROM TICKET1
UNION ALL
SELECT PNR FROM PASSENGER1;

# INTERSECT
SELECT TICKET1.PNR FROM TICKET1
JOIN PASSENGER1
ON PASSENGER1.PNR=TICKET1.PNR;

SELECT PASSENGER1.PNR,P_NAME
FROM PASSENGER1
JOIN TICKET1
ON PASSENGER1.PNR=TICKET1.PNR;

SELECT *FROM
PASSENGER1 AS PA
LEFT JOIN
TICKET1 AS TI
ON PA.P_ID=TI.TICKET_ID;


SELECT *FROM 
PASSENGER1 AS PA
RIGHT JOIN
TICKET1 AS TI
ON PA.P_ID=TI.TICKET_ID;

SELECT P_NAME FROM PASSENGER1
WHERE AGE=21;

SELECT* FROM PASSENGER1
WHERE GENDER NOT IN ('FEMALE');

/* EXPERIMENT - 7 => JOINS */

SELECT * FROM TICKET1,PASSENGER1
WHERE TICKET1.PNR=PASSENGER1.PNR;





